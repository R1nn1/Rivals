local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({
    Name = "Rinns Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "RinnsHubRivals"
})

local Tab = Window:MakeTab({
    Name = "Main Tab",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local aimbotEnabled = false
local wallCheckEnabled = false
local aimbotFov = 100 -- default FOV value
local lockOnRange = 3000 -- default lock-on range
local fovCircle
local triggerBotEnabled = false
local triggerBotFov = 25 -- default Trigger Bot FOV value
local triggerBotWallCheck = false
local triggerBotCircle
local aimPart = "Head" -- default aim part
local autoVoteEnabled = false
local players = game:GetService("Players")
local camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local activeTouch = nil
local mouse1press = mouse1press or function() end
local mouse1release = mouse1release or function() end
local triggerBotConnection

local fovCircleColor = Color3.new(1, 1, 1)
local triggerBotCircleColor = Color3.new(1, 1, 0)

local originalInputType = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.MouseEnabled
end

local function createFovCircle()
    if fovCircle then
        fovCircle:Remove()
    end
    fovCircle = Drawing.new("Circle")
    fovCircle.Thickness = 2
    fovCircle.NumSides = 64
    fovCircle.Radius = aimbotFov
    fovCircle.Color = fovCircleColor
    fovCircle.Transparency = 0.4
    fovCircle.Visible = aimbotEnabled
end

local function updateFovCircle()
    if fovCircle then
        fovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        fovCircle.Radius = aimbotFov
        fovCircle.Color = fovCircleColor
        fovCircle.Visible = aimbotEnabled
    end
end

local function createTriggerBotCircle()
    if triggerBotCircle then
        triggerBotCircle:Remove()
    end
    triggerBotCircle = Drawing.new("Circle")
    triggerBotCircle.Thickness = 2
    triggerBotCircle.NumSides = 64
    triggerBotCircle.Radius = triggerBotFov
    triggerBotCircle.Color = triggerBotCircleColor
    triggerBotCircle.Transparency = 0.4
    triggerBotCircle.Visible = triggerBotEnabled
end

local function updateTriggerBotCircle()
    if triggerBotCircle then
        triggerBotCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        triggerBotCircle.Radius = triggerBotFov
        triggerBotCircle.Color = triggerBotCircleColor
        triggerBotCircle.Visible = triggerBotEnabled
    end
end

local function isPlayerVisible(target)
    local origin = camera.CFrame.Position
    local _, onScreen = camera:WorldToScreenPoint(target.Position)
    if not onScreen then
        return false
    end
    
    local ray = Ray.new(origin, (target.Position - origin).unit * lockOnRange)
    local part, hitPosition = workspace:FindPartOnRayWithIgnoreList(ray, {camera, players.LocalPlayer.Character})
    if part and part:IsDescendantOf(target.Parent) then
        return true
    end
    
    return false
end

local function getClosestPlayer()
    local closestPlayer = nil
    local lowestHealth = math.huge
    local playersInCircle = {}
    
    for _, player in pairs(players:GetPlayers()) do
        if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local humanoid = player.Character.Humanoid
            
            if humanoid.Health > 0 then -- Check if the player is alive
                local screenPoint = camera:WorldToScreenPoint(hrp.Position)
                local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)).Magnitude
                
                if distanceFromCenter <= aimbotFov and (not wallCheckEnabled or isPlayerVisible(hrp)) then
                    table.insert(playersInCircle, player)
                end
            end
        end
    end
    
    for _, player in pairs(playersInCircle) do
        if player.Character.Humanoid.Health < lowestHealth then
            lowestHealth = player.Character.Humanoid.Health
            closestPlayer = player
        end
    end
    
    return closestPlayer
end

Tab:AddToggle({
    Name = "Aimbot",
    Default = false,
    Callback = function(Value)
        aimbotEnabled = Value
        createFovCircle()
    end    
})

Tab:AddToggle({
    Name = "Wall Check",
    Default = false,
    Callback = function(Value)
        wallCheckEnabled = Value
    end    
})

Tab:AddSlider({
    Name = "Aimbot FOV Changer",
    Min = 0,
    Max = 1000,
    Default = 100,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "FOV",
    Callback = function(Value)
        aimbotFov = Value
        updateFovCircle()
    end    
})

Tab:AddSlider({
    Name = "Lock-On Range Changer",
    Min = 0,
    Max = 5000,
    Default = 3000,
    Color = Color3.fromRGB(255,255,255),
    Increment = 100,
    ValueName = "Range",
    Callback = function(Value)
        lockOnRange = Value
    end    
})

Tab:AddDropdown({
    Name = "Aim Part",
    Default = "Head",
    Options = {"Head", "Torso", "HumanoidRootPart"},
    Callback = function(Value)
        aimPart = Value
    end    
})

Tab:AddToggle({
    Name = "Trigger Bot",
    Default = false,
    Callback = function(Value)
        triggerBotEnabled = Value
        createTriggerBotCircle()

        if triggerBotConnection then
            triggerBotConnection:Disconnect()
        end

        if Value then
            if isMobile() then
                UserInputService.TouchEnabled = false
                UserInputService.MouseEnabled = true
            end
            
            triggerBotConnection = game:GetService("RunService").RenderStepped:Connect(function()
                local player = game:GetService("Players").LocalPlayer
                local mouse = player:GetMouse()
                if mouse.Target and mouse.Target.Parent:FindFirstChild("Humanoid") and mouse.Target.Parent.Name ~= player.Name then
                    mouse1press()
                    wait(0.05)
                    mouse1release()
                end
            end)
        else
            if isMobile() then
                UserInputService.TouchEnabled = true
                UserInputService.MouseEnabled = false
            end
        end
    end    
})

Tab:AddSlider({
    Name = "Trigger Bot FOV Changer",
    Min = 0,
    Max = 50,
    Default = 25,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "FOV",
    Callback = function(Value)
        triggerBotFov = Value
        updateTriggerBotCircle()
    end    
})

Tab:AddToggle({
    Name = "Trigger Bot Wall Check",
    Default = false,
    Callback = function(Value)
        triggerBotWallCheck = Value
    end    
})

Tab:AddToggle({
    Name = "Auto Vote Map",
    Default = false,
    Callback = function(Value)
        autoVoteEnabled = Value

        if autoVoteEnabled then
            spawn(function()
                while autoVoteEnabled do
                    local maps = {"Arena", "Backrooms", "Docks", "Onyx", "Construction", "Station", "Crossroads"}
                    local map = maps[math.random(1, #maps)]
                    game:GetService("ReplicatedStorage").Remotes.Duels.VoteMap:FireServer(map)
                    wait(0.15)
                end
            end)
        end
    end    
})

local colorOptions = {"White", "Red", "Green", "Blue", "Yellow"}

local function getColorFromName(colorName)
    if colorName == "White" then
        return Color3.new(1, 1, 1)
    elseif colorName == "Red" then
        return Color3.new(1, 0, 0)
    elseif colorName == "Green" then
        return Color3.new(0, 1, 0)
    elseif colorName == "Blue" then
        return Color3.new(0, 0, 1)
    elseif colorName == "Yellow" then
        return Color3.new(1, 1, 0)
    end
end

Tab:AddDropdown({
    Name = "FOV Circle Color",
    Default = "White",
    Options = colorOptions,
    Callback = function(Value)
        fovCircleColor = getColorFromName(Value)
        updateFovCircle()
    end    
})

Tab:AddDropdown({
    Name = "Trigger Bot Circle Color",
    Default = "Yellow",
    Options = colorOptions,
    Callback = function(Value)
        triggerBotCircleColor = getColorFromName(Value)
        updateTriggerBotCircle()
    end    
})

game:GetService("RunService").RenderStepped:Connect(function()
    updateFovCircle()
    updateTriggerBotCircle()
    
    if aimbotEnabled then
        local closestPlayer = getClosestPlayer()
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild(aimPart) then
            camera.CFrame = CFrame.new(camera.CFrame.Position, closestPlayer.Character[aimPart].Position)
        end
    end
end)

local Tab = Window:MakeTab({
    Name = "Players Tab",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Section = Tab:AddSection({
    Name = "Players Tab"
})

local plr = game:GetService("Players")
local Lp = plr.LocalPlayer
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")

local controlModule = require(Lp.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))

local function createVelocityAndGyro(character)
    local bv = Instance.new("BodyVelocity")
    bv.Name = "VelocityHandler"
    bv.Parent = character.HumanoidRootPart
    bv.MaxForce = Vector3.new(0, 0, 0)
    bv.Velocity = Vector3.new(0, 0, 0)

    local bg = Instance.new("BodyGyro")
    bg.Name = "GyroHandler"
    bg.Parent = character.HumanoidRootPart
    bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.P = 1000
    bg.D = 50
end

createVelocityAndGyro(Lp.Character)

Lp.CharacterAdded:Connect(function(NewChar)
    createVelocityAndGyro(NewChar)
end)

local speed = 50
local buttonIsOn = false
local infJumpEnabled = false
local noClipEnabled = false

rs.RenderStepped:Connect(function()
    if Lp.Character and Lp.Character:FindFirstChildOfClass("Humanoid") and Lp.Character.HumanoidRootPart and Lp.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and Lp.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
        if buttonIsOn then
            Lp.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            Lp.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
            Lp.Character.Humanoid.PlatformStand = true
        else
            Lp.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(0, 0, 0)
            Lp.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(0, 0, 0)
            Lp.Character.Humanoid.PlatformStand = false
            return
        end

        Lp.Character.HumanoidRootPart.GyroHandler.CFrame = workspace.CurrentCamera.CFrame
        local direction = controlModule:GetMoveVector()
        Lp.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
        if direction.X > 0 then
            Lp.Character.HumanoidRootPart.VelocityHandler.Velocity = Lp.Character.HumanoidRootPart.VelocityHandler.Velocity + workspace.CurrentCamera.CFrame.RightVector * (direction.X * speed)
        end
        if direction.X < 0 then
            Lp.Character.HumanoidRootPart.VelocityHandler.Velocity = Lp.Character.HumanoidRootPart.VelocityHandler.Velocity + workspace.CurrentCamera.CFrame.RightVector * (direction.X * speed)
        end
        if direction.Z > 0 then
            Lp.Character.HumanoidRootPart.VelocityHandler.Velocity = Lp.Character.HumanoidRootPart.VelocityHandler.Velocity - workspace.CurrentCamera.CFrame.LookVector * (direction.Z * speed)
        end
        if direction.Z < 0 then
            Lp.Character.HumanoidRootPart.VelocityHandler.Velocity = Lp.Character.HumanoidRootPart.VelocityHandler.Velocity - workspace.CurrentCamera.CFrame.LookVector * (direction.Z * speed)
        end
    end

    if noClipEnabled then
        for _, v in pairs(Lp.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end)

Tab:AddToggle({
    Name = "Fly",
    Default = false,
    Callback = function(Value)
        buttonIsOn = Value
        if Value then
            print("Fly Enabled")
        else
            print("Fly Disabled")
        end
    end
})

Tab:AddSlider({
    Name = "Fly Speed",
    Min = 0,
    Max = 5000,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        speed = Value
    end
})

Tab:AddToggle({
    Name = "Inf Jump",
    Default = false,
    Callback = function(Value)
        infJumpEnabled = Value
        if Value then
            print("Infinite Jump Enabled")
        else
            print("Infinite Jump Disabled")
        end
    end
})

uis.JumpRequest:Connect(function()
    if infJumpEnabled and Lp.Character and Lp.Character:FindFirstChildOfClass("Humanoid") then
        Lp.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

Tab:AddToggle({
    Name = "No Clip",
    Default = false,
    Callback = function(Value)
        noClipEnabled = Value
        if Value then
            print("No Clip Enabled")
        else
            print("No Clip Disabled")
        end
    end
})

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

Notification:Notify(
    {Title = "IMPORTANT", Description = "If any of the toggles are already on turn it off and turn it back on again black = off green = on"},
    {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 10, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) print(tostring(State)) end}
)
