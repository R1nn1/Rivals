local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()

local Window = ArrayField:CreateWindow({
    Name = "Rinns Hub Rivals",
    LoadingTitle = "Rinns Hub Rivals",
    LoadingSubtitle = "Code By Rinn Ui by Sirius Ui remake by Hosvile",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RinnsHubConfigs",
        FileName = "RinnsHubRivals"
    },
    Discord = {
        Enabled = true,
        Invite = "pzZTWgkUgE",
        RememberJoins = false
    },
    KeySystem = false,
    KeySettings = {
        Title = "ArrayField",
        Subtitle = "Key System",
        Note = "Join the discord (discord.gg/sirius)",
        FileName = "ArrayFieldsKeys",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = {"Hello", "Bye"},
        Actions = {
            [1] = {
                Text = 'Click here to copy the key link',
                OnPress = function() end,
            }
        },
    }
})

local Tab = Window:CreateTab("Main Tab", 4483362458)

local aimbotEnabled = false
local wallCheckEnabled = false
local aimbotFov = 175
local lockOnRange = 3000
local aimbotSmoothness = 0.1
local aimbotCircleSize = 175
local fovCircle = nil
local aimPart = "Head"
local fovFollowMouse = false
local autoFarmEnabled = false
local espEnabled = false
local players = game:GetService("Players")
local camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local wishlistedUsers = {}
local wishlistFriends = false

local fovCircleColor = Color3.new(1, 1, 1)
local fovCircleTransparency = 0.4
local autoFarmTarget = nil

local function createFovCircle()
    if fovCircle then return end
    fovCircle = Drawing.new("Circle")
    fovCircle.Thickness = 2
    fovCircle.NumSides = 64
    fovCircle.Radius = aimbotFov
    fovCircle.Color = fovCircleColor
    fovCircle.Transparency = fovCircleTransparency
    fovCircle.Visible = aimbotEnabled
end

local function updateFovCircle()
    if fovCircle then
        fovCircle.Position = fovFollowMouse and UserInputService:GetMouseLocation() or Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        fovCircle.Radius = aimbotCircleSize
        fovCircle.Color = fovCircleColor
        fovCircle.Transparency = fovCircleTransparency
        fovCircle.Visible = aimbotEnabled
    end
end

createFovCircle()

local function isWallBetween(part)
    if not wallCheckEnabled then return false end
    local cameraPos = camera.CFrame.Position
    local ray = Ray.new(cameraPos, part.Position - cameraPos)
    local partHit = workspace:FindPartOnRayWithIgnoreList(ray, {camera, part.Parent})
    return partHit and partHit.Parent ~= part.Parent
end

local function isUserWishlisted(username)
    for _, user in pairs(wishlistedUsers) do
        if string.find(string.lower(username), string.lower(user)) then
            return true
        end
    end
    return false
end

local function getClosestPlayer()
    local closestPlayer, shortestDistance = nil, math.huge
    for _, player in pairs(players:GetPlayers()) do
        if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild(aimPart) and not isUserWishlisted(player.Name) then
            local part = player.Character[aimPart]
            local partPos = camera:WorldToViewportPoint(part.Position)
            local distance = (Vector2.new(partPos.X, partPos.Y) - fovCircle.Position).Magnitude
            local range = (camera.CFrame.Position - part.Position).Magnitude
            if distance < aimbotFov and distance < shortestDistance and range < lockOnRange and not isWallBetween(part) then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end
    return closestPlayer
end

local function aimAtClosestPlayer()
    local closestPlayer = getClosestPlayer()
    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild(aimPart) then
        local part = closestPlayer.Character[aimPart]
        camera.CFrame = camera.CFrame:Lerp(CFrame.new(camera.CFrame.Position, part.Position), aimbotSmoothness)
    end
end

local function onRenderStep()
    if aimbotEnabled then
        aimAtClosestPlayer()
    end
    updateFovCircle()

    if autoFarmEnabled then
        if not autoFarmTarget or not autoFarmTarget.Character or not autoFarmTarget.Character:FindFirstChild("HumanoidRootPart") or autoFarmTarget.Character.Humanoid.Health <= 0 then
            wait(4)
            autoFarmTarget = getClosestPlayer()
        end
        if autoFarmTarget and autoFarmTarget.Character and autoFarmTarget.Character:FindFirstChild("HumanoidRootPart") then
            local targetHRP = autoFarmTarget.Character.HumanoidRootPart
            local radius = 5
            local height = 8
            local speed = 2 * math.pi / 0.7

            while autoFarmEnabled and autoFarmTarget and autoFarmTarget.Character and autoFarmTarget.Character:FindFirstChild("HumanoidRootPart") and autoFarmTarget.Character.Humanoid.Health > 0 do
                local angle = tick() * speed
                local offset = Vector3.new(math.cos(angle) * radius, height, math.sin(angle) * radius)
                players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetHRP.Position + offset)
                camera.CFrame = CFrame.new(camera.CFrame.Position, targetHRP.Position)
                wait(0.01)
            end

            wait(5)
        else
            wait(0.5)
        end
    end
end

RunService.RenderStepped:Connect(onRenderStep)

local function onCharacterAdded(character)
    if aimbotEnabled then
        while aimbotEnabled do
            aimAtClosestPlayer()
            wait()
        end
    end
end

players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

local function onInputBegan(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 and aimbotEnabled then
        aimAtClosestPlayer()
    end
end

UserInputService.InputBegan:Connect(onInputBegan)

Tab:CreateToggle({
    Name = "Aimbot",
    Info = {
        Title = 'Enable or Disable Aimbot',
        Description = 'Dont feel like typing all that but remember Dont hold fire spam the fire button',
    },
    CurrentValue = aimbotEnabled,
    Flag = "AimbotToggle",
    Callback = function(Value)
        aimbotEnabled = Value
        updateFovCircle()
    end,
})

Tab:CreateToggle({
    Name = "Aimbot Wall Check",
    Info = {
        Title = 'Enable or Disable Wall Check',
        Description = 'Checks If the person the aimbot is trying to lock on is behind a way and wont lock on to them',
    },
    CurrentValue = wallCheckEnabled,
    Flag = "WallCheckToggle",
    Callback = function(Value)
        wallCheckEnabled = Value
    end,
})

Tab:CreateToggle({
    Name = "Aimbot Fov Follow Mouse",
    Info = {
        Title = 'Enable or Disable Aimbot Fov Follow Mouse',
        Description = 'Makes It so the Aimbot Fov follows your Mouse Dont Use This For Mobile',
    },
    CurrentValue = fovFollowMouse,
    Flag = "FovFollowMouseToggle",
    Callback = function(Value)
        fovFollowMouse = Value
    end,
})

Tab:CreateToggle({
    Name = "Win Entire Match Only Use this in a match",
    Info = {
        Title = 'Enable or Disable Win Entire Match Easy!!!!!!',
        Description = 'Flys you around the target and turn on aimbot first before using it',
    },
    CurrentValue = autoFarmEnabled,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        autoFarmEnabled = Value
    end,
})

Tab:CreateSlider({
    Name = "Lock On Range",
    Info = {
        Title = 'Change Lock On Range',
        Description = 'Adjusts the range at which the aimbot locks on to people',
    },
    Range = {1, 50000},
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = lockOnRange,
    Flag = "LockOnRangeSlider",
    Callback = function(Value)
        lockOnRange = Value
    end,
})

Tab:CreateSlider({
    Name = "Aimbot Smoothness",
    Info = {
        Title = 'Change Aimbot Smoothness',
        Description = 'Lets you change how smooth the Aimbot Moves (i usually have this at 0.1 but you can adjust this to whatever you like put this at 0.75',
    },
    Range = {0.01, 1},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = aimbotSmoothness,
    Flag = "AimbotSmoothnessSlider",
    Callback = function(Value)
        aimbotSmoothness = Value
    end,
})

Tab:CreateSlider({
    Name = "Aimbot Fov Size",
    Info = {
        Title = 'Change The Aimbot Fov Size',
        Description = 'Lets you change the size of the aimbot Fov',
    },
    Range = {1, 1000},
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = aimbotCircleSize,
    Flag = "AimbotCircleSizeSlider",
    Callback = function(Value)
        aimbotCircleSize = Value
        updateFovCircle()
    end,
})

Tab:CreateSlider({
    Name = "Aimbot Fov Transparency",
    Info = {
        Title = 'Change The Aimbot Fov Transparency',
        Description = 'Adjusts the transparency of the Aimbot Fov So Customizable wowie',
    },
    Range = {0, 1},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = fovCircleTransparency,
    Flag = "FovCircleTransparencySlider",
    Callback = function(Value)
        fovCircleTransparency = Value
        updateFovCircle()
    end,
})

Tab:CreateDropdown({
    Name = "Aim Part",
    Info = {
        Title = 'Select Aim Part',
        Description = 'Choose the body part the aimbot should aim that',
    },
    Options = {"Head", "Torso", "LeftArm", "RightArm", "LeftLeg", "RightLeg"},
    CurrentOption = aimPart,
    Flag = "AimPartDropdown",
    Callback = function(Value)
        aimPart = Value
    end,
})

Tab:CreateSpacing(nil,10)

Tab:CreateColorPicker({
    Name = "Aimbot Fov Color",
    Color = Color3.fromRGB(2,255,255),
    Info = {
        Title = 'Change The Aimbot Fov Color',
        Description = 'Adjusts the color of the Aimbot Fov circle.',
    },
    Default = fovCircleColor,
    Flag = "FovCircleColorPicker",
    Callback = function(Value)
        fovCircleColor = Value
        updateFovCircle()
    end,
})

Tab:CreateToggle({
    Name = "Wishlist Friends Only",
    Info = {
        Title = 'Wishlist Friends Only',
        Description = 'Toggle to only wishlist friends.',
    },
    CurrentValue = wishlistFriends,
    Flag = "WishlistFriendsToggle",
    Callback = function(Value)
        wishlistFriends = Value
        if wishlistFriends then
            local success, result = pcall(function()
                return players:GetFriendsAsync(players.LocalPlayer.UserId)
            end)
            if success then
                wishlistedUsers = {}
                for _, friend in pairs(result) do
                    table.insert(wishlistedUsers, friend.Username)
                end
            else
                print("Error fetching friends:", result)
            end
        end
    end,
})

Tab:CreateButton({
    Name = "Clear Wishlist",
    Info = {
        Title = 'Clear Wishlist',
        Description = 'Clears all users from the wishlist.',
    },
    Callback = function()
        wishlistedUsers = {}
    end,
})

-- Function to find the closest match for a username
local function findClosestUsername(input)
    local closestUsername = nil
    local closestDistance = math.huge

    for _, player in pairs(players:GetPlayers()) do
        local lowerInput = string.lower(input)
        local lowerName = string.lower(player.Name)
        local _, matches = string.gsub(lowerName, lowerInput, "")
        local distance = #lowerInput + #lowerName - 2 * matches
        if matches > 0 and distance < closestDistance then
            closestDistance = distance
            closestUsername = player.Name
        end
    end

    return closestUsername
end

-- Update wishlist to store closest matching usernames
Tab:CreateInput({
    Name = "Wishlist Users On Skibidi",
    PlaceholderText = "The Aimbot wont lock on wishlistedUsers put a comma to show different users",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        wishlistedUsers = {}
        local userInput = string.split(Text, ",")
        for _, user in pairs(userInput) do
            user = user:match("^%s*(.-)%s*$") -- trim whitespace
            if user ~= "" then
                local closestMatch = findClosestUsername(user)
                if closestMatch then
                    table.insert(wishlistedUsers, closestMatch)
                end
            end
        end
    end,
})
